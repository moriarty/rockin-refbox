/*  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * - Neither the name of the authors nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package raw_msgs;

import "Time.proto";

option java_package = "org.raw.common_msgs";
option java_outer_classname = "TestStateProtos";


message TestScenario {
  enum TestType {
    NONE = 0; // No test running
    BNT  = 1; // basic navigation test
    BMT  = 2; // basic manipulation test
    BTT  = 3; // basic transportation test
  }

  // e.g. Basic Navigation Test 1 "BNT 1: Basic Navigation Test"
  required TestType type         = 1;
  required uint32   type_id      = 2;
  optional string   description  = 3;
}


message TestState {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 100;
  }

  enum State {
    RUNNING   = 1;
    PAUSED    = 2;
    FINISHED  = 3;
    STOPPED   = 4;
  }

  enum Phase {
    EXECUTION   = 0;
    CALIBRATION = 1;
    PREPARATION = 2;
  }

  // Time since test start
  required Time test_time = 1;

  // Current test state
  required State state = 3;

  // Current test phase
  required Phase phase = 9;

  // Current test scenario
  required TestScenario scenario = 4;

  // Name of all known teams
  repeated string known_teams = 5;

  // Name of teams which are currently connected to the RefBox
  repeated string connected_teams = 6;
}


// Request setting of a new test state
message SetTestState {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 101;
  }

  // The new desired state
  required TestState.State state = 1;
}


// Request setting of a new test scenario
message SetTestScenario {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 102;
  }

  // The new desired test
  required TestScenario scenario = 1;
}


// Message to control the test state machine by requesting transitions
message SetTestTransitionEvent {
  enum CompType {
    COMP_ID  = 2000;
    MSG_TYPE = 103;
  }

  enum Event {
    // Transition from any state to STOPPED state and re-initialize the
    // test scenario (e.g. after setting a new test scenario)
    RESET = 0;

    // Transition from STOPPED or PAUSED to RUNNING state
    START = 1;

    // Transition from RUNNING to STOPPED state
    STOP = 2;

    // Transition from RUNNING to PAUSED state
    PAUSE = 3;
  }

  // The requested transition
  required Event event = 1;
}
